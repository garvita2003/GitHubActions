# .github/workflows/phase1Scenarios.yml

name: Two Jobs with Conditional Logic

on:
  push:
    branches:
      - main
  workflow_dispatch: # Allows manual triggering for easy testing

jobs:
  # Job A: Runs on both Ubuntu and macOS.
  # Explicitly configured to fail the Ubuntu instance for demonstration.
  job-a:
    name: Job-A on ${{ matrix.os_runner }}
    runs-on: ${{ matrix.os_runner }}
    strategy:
      fail-fast: false # Ensures all matrix jobs run even if one fails
      matrix:
        os_runner: [ubuntu-latest, macos-latest] # Our two runners
    outputs:
      # These outputs must capture the FINAL status of each matrix run.
      # The status here refers to the entire job-a matrix instance.
      status_ubuntu: ${{ steps.capture_final_status.outputs.ubuntu_status }}
      status_macos: ${{ steps.capture_final_status.outputs.macos_status }}
    steps:
      - name: Run Job-A logic
        id: run_job_a # Giving it an ID for clarity, though not directly used for output here
        run: |
          echo "Running Job-A logic on ${{ matrix.os_runner }}..."
          
          # --- SCENARIO: SIMULATE FAILURE FOR UBUNTU-LATEST ---
          if [ "${{ matrix.os_runner }}" == "ubuntu-latest" ]; then
            echo "Simulating a controlled failure for Job-A on ubuntu-latest."
            exit 1 # A non-zero exit code makes the step (and job instance) fail.
          fi
          # --- END SCENARIO ---
          
          echo "Job-A on ${{ matrix.os_runner }} completed successfully."
          # No output from this step directly; the job-level status is captured later.

      - name: Capture Final Job-A Status for Output
        id: capture_final_status
        if: always() # This is crucial: ensures the status is captured even if 'Run Job-A logic' failed
        run: |
          # Use `github.job.status` to get the final status of the *current matrix instance* of job-a.
          # This should accurately reflect 'success' or 'failure' even after an 'exit 1'.
          echo "Capturing status: ${{ github.job.status }}"
          if [ "${{ matrix.os_runner }}" == "ubuntu-latest" ]; then
            echo "ubuntu_status=${{ github.job.status }}" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.os_runner }}" == "macos-latest" ]; then
            echo "macos_status=${{ github.job.status }}" >> $GITHUB_OUTPUT
          fi
          echo "Current ${{ matrix.os_runner }} job status outputted: ${{ github.job.status }}"


  # Job B: Runs on matrix, with conditional logic handled within its steps.
  # Using if: always() to ensure it's not skipped entirely due to upstream failures.
  job-b:
    name: Job-B on ${{ matrix.os_runner }}
    needs: job-a # Job B depends on all instances of Job A completing.
    runs-on: ${{ matrix.os_runner }}
    strategy:
      fail-fast: false # Ensure all matrix jobs for Job B are created
      matrix:
        os_runner: [ubuntu-latest, macos-latest] # Re-defines the matrix for Job B.
    
    # Using if: always() to ensure that job-b's matrix instances are always initiated,
    # even if one of job-a's matrix instances failed.
    if: always() 
    
    steps:
      - name: Evaluate and Run Job-B Logic
        # This step will only execute if Job-A on the *same* OS runner succeeded.
        # This condition directly uses the outputs from job-a, which should now be accurate.
        if: |
          (matrix.os_runner == 'ubuntu-latest' && needs.job-a.outputs.status_ubuntu == 'success') ||
          (matrix.os_runner == 'macos-latest' && needs.job-a.outputs.status_macos == 'success')
        run: |
          echo "--------------------------------------------------------"
          echo "SUCCESS: Running Job-B logic on ${{ matrix.os_runner }}!"
          echo "Job-A on this runner succeeded. Proceeding with Job-B tasks."
          echo "--------------------------------------------------------"
          # Add your actual Job-B commands here (e.g., build, test, deploy)
          
      - name: Indicate Job-B Logic Skipped
        # This step will execute only if the 'if' condition of the previous step was FALSE.
        # This clearly shows when Job B's logic was intentionally skipped within the job instance.
        if: |
          !((matrix.os_runner == 'ubuntu-latest' && needs.job-a.outputs.status_ubuntu == 'success') ||
            (matrix.os_runner == 'macos-latest' && needs.job-a.outputs.status_macos == 'success'))
        run: |
          echo "--------------------------------------------------------"
          echo "SKIPPED: Job-B on ${{ matrix.os_runner }} was skipped."
          echo "Reason: Job-A on the same runner did NOT succeed."
          echo "--------------------------------------------------------"
