# .github/workflows/conditional-parallel-pipeline.yml (Example for GitHub Actions)

name: Conditional Parallel Jobs

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  # Define the strategy matrix for runners
  run-jobs:
    runs-on: ubuntu-latest # This runner will orchestrate the matrix jobs
    strategy:
      matrix:
        runner: [RunnerA, RunnerB] # Our custom runner names for logical grouping

    outputs:
      job_a_status_RunnerA: ${{ steps.job_a_runner_a_status.outputs.status }}
      job_a_status_RunnerB: ${{ steps.job_a_runner_b_status.outputs.status }}

    steps:
      # Job-A for RunnerA
      - name: Run Job-A on RunnerA
        id: job_a_runner_a
        if: matrix.runner == 'RunnerA'
        run: |
          echo "Running Job-A on RunnerA..."
          # Simulate success
          exit 0
        # If this step fails, it will mark the job as failed for this matrix combination
      - name: Set Job-A RunnerA Status
        if: matrix.runner == 'RunnerA'
        run: echo "status=${{ job.status }}" >> $GITHUB_OUTPUT

      # Job-A for RunnerB
      - name: Run Job-A on RunnerB
        id: job_a_runner_b
        if: matrix.runner == 'RunnerB'
        run: |
          echo "Running Job-A on RunnerB..."
          # Simulate success
          exit 0
        # If this step fails, it will mark the job as failed for this matrix combination
      - name: Set Job-A RunnerB Status
        if: matrix.runner == 'RunnerB'
        run: echo "status=${{ job.status }}" >> $GITHUB_OUTPUT

  # Job-B for RunnerA (depends on Job-A RunnerA)
  job-b-runner-a:
    runs-on: ubuntu-latest # Or your specific 'RunnerA' machine
    needs: run-jobs # This ensures run-jobs completes before this job starts
    if: needs.run-jobs.outputs.job_a_status_RunnerA == 'success'
    steps:
      - name: Run Job-B on RunnerA
        run: |
          echo "Running Job-B on RunnerA because Job-A on RunnerA succeeded."
          # Your commands for Job-B on RunnerA
          exit 0

  # Job-B for RunnerB (depends on Job-A RunnerB)
  job-b-runner-b:
    runs-on: ubuntu-latest # Or your specific 'RunnerB' machine
    needs: run-jobs # This ensures run-jobs completes before this job starts
    if: needs.run-jobs.outputs.job_a_status_RunnerB == 'success'
    steps:
      - name: Run Job-B on RunnerB
        run: |
          echo "Running Job-B on RunnerB because Job-A on RunnerB succeeded."
          # Your commands for Job-B on RunnerB
          exit 0
